{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","searchTerm","setSearchTerm","items","books","setBooks","API_URL","fetchBooks","a","axios","get","result","console","log","data","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","map","book","i","key","alt","volumeInfo","title","src","imageLinks","thumbnail","publishedDate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,uKCsG5BC,EA9FF,WAAI,MAKmBC,mBAAU,IAL7B,mBAKVC,EALU,KAKEC,EALF,OAMQF,mBAAU,CAACG,MAAO,KAN1B,mBAMVC,EANU,KAMHC,EANG,KAiBbC,EAAU,8CAERC,EAAU,uCAAG,4BAAAC,EAAA,sEAEIC,IAAMC,IAAN,UAAcJ,EAAd,cAA2BL,IAF/B,OAEXU,EAFW,OAGjBC,QAAQC,IAAR,UAAeP,EAAf,cAA4BL,IAE9BW,QAAQC,IAAIF,EAAOG,MAEnBT,EAASM,EAAOG,MAPG,2CAAH,qDAwBd,OAGE,iCACE,0BAAMC,SAhBY,SAACC,GACvBJ,QAAQC,IAAI,cAEdG,EAAEC,iBACFL,QAAQC,IAAI,QAEZN,MAWQ,+BACE,qEACA,2BACAW,KAAM,SACNC,YAAc,kBACdC,MAASnB,EAGToB,SAhDY,SAACL,GACrBJ,QAAQC,IAAI,kBAAoBG,EAAEM,OAAOF,OACzClB,EAAcc,EAAEM,OAAOF,UAiDf,4BAAQF,KAAM,UAAd,eAIN,4BAGQd,EAAMD,MAAMoB,KAAI,SAACC,EAAMC,GACrB,OACE,wBAAIC,IAAMD,GACV,6BACA,yBAAKE,IAAMH,EAAKI,WAAWC,MAAOC,IAAKN,EAAKI,WAAWG,WAAWC,YAChE,6BAEA,4BAAKR,EAAKI,WAAWC,OACvB,2BAAIL,EAAKI,WAAWK,iBAKpB,oCC3EIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.315e4bf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//adding axios to fetch api\nimport axios from 'axios';\n\n\n\nconst  App = ()=>{\n\n\n//adding local state for search input with useState hooks\n\nconst [searchTerm, setSearchTerm] = useState ('');\nconst [books, setBooks] =useState ({items: [] });\n\nconst onInputChange = (e)=>{\n  console.log('this is line 13' + e.target.value);\n  setSearchTerm(e.target.value);\n\n}\n\n\n\n\nlet API_URL = 'https://www.googleapis.com/books/v1/volumes';\n\nconst fetchBooks = async () =>{\n  //ajax call to api with axios\n  const result = await axios.get (`${API_URL}?q=${searchTerm}`);\n  console.log(`${API_URL}?q=${searchTerm}`);\n//Books result\nconsole.log(result.data);\n\nsetBooks(result.data);\n}\n\n//Submit handler\n\nconst onSubmitHandler = (e)=>{\n  console.log(\"happening!\")\n//preventing browser from refreshing the page\ne.preventDefault();\nconsole.log('here');\n//call fetch books async function\nfetchBooks();\n}\n\n\n\n\n  return (\n    //ading form for searching the google books API.\n    //onSubmit should be in the form not in the input field\n    <section>\n      <form onSubmit={onSubmitHandler}>\n        <label>\n          <span> Search for books from Google Books</span>\n          <input\n          type =\"search\"\n          placeholder = \"type something!\"\n          value = {searchTerm}\n          \n          \n          onChange ={onInputChange}\n         \n          />\n          <button type =\"submit\"> Search! </button>\n        </label>\n      </form>\n\n    <ul>\n          {\n\n            books.items.map((book, i)=>{\n              return(\n                <li key ={i}>\n                <div>\n                <img alt ={book.volumeInfo.title} src={book.volumeInfo.imageLinks.thumbnail}/>\n                  <div>\n\n                  <h3>{book.volumeInfo.title}</h3> \n                <p>{book.volumeInfo.publishedDate}</p>\n                  </div>\n               \n                  \n                  </div>\n                <hr/>\n                </li>\n              )\n            })\n\n\n          }\n\n    </ul>\n\n\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}